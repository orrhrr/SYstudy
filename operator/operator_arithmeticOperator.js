// 연산자: 하나 이상의 표현식을 대상으로 산술, 할당, 비교, 논리, 타입, 지수 연산 등을 수행해 하나의 값을 만든다.
// 피연산자: 연산의 대상 
// 피연산자와 연산자 표현식은 값으로 평가될 수 있는 표현식이어야 한다.


// 산술 연산자
5 * 4 // 20

// 문자열 연결 연산자
'My name is' + 'Lee' // 'My name is Lee'

// 할당 연산자
color = 'red' // 'red'

// 비교 연산자
3 > 5 // false

// 논리 연산자
true && false // false

// 타입 연산자
typeof 'Hi' // string





// 이항 산술 연산자 (2개의 피연산자를 산술하여 숫자 값을 만든다.)
// 어떤 산술 연산을 해도 피연산자의 값이 바뀌는 경우가 없고 언제나 새로운 값을 만들 뿐이다.

5 + 2; // 덧셈(7)
5 - 2; // 뺼셈(3)
5 * 2; // 곱셈(10)
5 / 2; // 나눗셈(2.5)
5 % 2; // 나머지(1)


// 단항 산술 연산자 (1개의 피연산자를 산술 연산하여 숫자 값을 만든다.)


// 증감 연산자(++,--)는 피연산자의 값을 변경하는 부수효과가 있다.
var x = 1;

// ++연산자는 피연산자의 값을 변경하는 암묵적 할당이 이뤄진다.
x++; // x = x + 1;
console.log(x); // 2

// --연산자는 피연산자의 값을 변경하는 암묵적 할당이 이뤄진다.
x--; // x = x - 1;
console.log(x); // 1


// 피연산자 앞에 위치한 증감 연산자는 먼저 피연산자의 값을 증가/감소 시킨 후 다른 연산을 수행.
// 피연산자 뒤에 위치한 증감 연산자는 먼저 다른 연산을 수행한 후, 피연산자의 값을 증가/감소 시킴.
var x = 5, result;

// 선할당 후증가
result = x++;
console.log(result, x); // 5 6

// 선증가 후할당
result = ++x;
console.log(result, x); // 7 7

// 선할당 후감소
result = x--;
console.log(result, x); // 7 6

// 선감소 후할당
result = --x;
console.log(result, x); // 5 5




// + 단항 연산자는 피연산자의 데이터 타입을 숫자타입으로 변환하여 반환한다.
// 피연산자의 값을 바꾸는 부수효과는 없다.

var x = '1';

// 문자열 -> 숫자
console.log(+x); // 1
console.log(x); // "1" (+ 연산을 할 때에만 숫자 타입으로 변환하여 반환)

// 불리언 -> 숫자
x = true;
console.log(+x); // 1
console.log(x); // true

x = false;
console.log(+x); // 0
console.log(x); // false

// 문자열을 숫자 타입으로 변환할 수 없으므로 NaN을 반환한다.
x = 'Hello';
console.log(+x); // NaN
console.log(x); // Hello




// - 단항 연산자는 피연산자의 부호를 반전한 값을 반환한다.

// 부호반전
-(-10); // 10

// 문자열 -> 숫자
-'10'; // -10

// 불리언 -> 숫자
-true; // -1

// 문자열은 숫자 타입으로 변환할 수 없으므로 NaN을 반환한다.
-'Hello'; // NaN




// + 연산자는 피연산자 중 하나 이상이 문자열인 경우 문자열 연결 연산자로 동작한다.

// 문자열 연결 연산자
'1' + 2; // '12'
1 + '2' // '12'

//산술 연산자
1 + 2; //3

// true는 1로 타입 변환된다.
1 + true; // 2

// false는 0으로 타입 변환된다.
1 + false; // 1

// null은 0으로 타입 변환된다.
1 + null; //1

// undefined는 숫자 타입 변환되지 않는다.
+undefined; // NaN
1 + undefined; // NaN  

