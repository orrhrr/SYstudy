// 표현식은 값으로 평가될 수 있는 문(statement)이다. 표현식이 평가되면 새로운 값을 생성하거나 기존 값을 참조한다.

// 리터럴 표현식
10
'hello'

// 식별자 표현식 (선언이 이미 존재한다고 가정)
sum
person.name
arr[1]

// 연산자 표현식
10+20 
sum = 10
sum !== 10

// 함수/메서드 호출 표현식(선언이 이미 존재한다고 가정)
square()
person.getName()

/*

- 표현식과 표현식이 평가된 값은 동등한 관계, 즉 동치다. (ex. 1+2=3 에서 1+2와 3은 동치다.)
- 값이 위치할 수 있는 자리에는 표현식도 위치할 수 있다.

*/


//문(statement)는 프로그램을 구성하는 기본 단위이자 최소 실행 단위이다.
//문은 여러 토큰으로 구성되며, 토큰이란 문법적인 의미를 가지면서 더 이상 나눌 수 없는 코드의 기본요소이다. (ex. var, =, +, 1 등)

//변수 선언문
var x;

//할당문
x = 5;

//함수 선언문
function foo () {}

// 조건문
if (x > 1) { console.log(x);}

// 반복문
for (let i = 0; i < 2; i++) {console.log(i);}


/* 
- 세미콜론은 문의 종료를 나타내며, 중괄호로 묶은 코드 블록 뒤에는 세미콜론을 붙이지 않는다.
- 표현식인 문과 표현식이 아닌 문을 구별하는 가장 간단한 방법은 변수에 할당해 보는것이다. (에러 여부)
- 리터럴 값은 표현식이다.
- 단, 변수 선언문은 undifind이라는 리터럴 값을 갖지만 이 값은 표현식의 평가 결과가 아닌 '완료 값'이기 때문에 표현식으로 볼 수 없다