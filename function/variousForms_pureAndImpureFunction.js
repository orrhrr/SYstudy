// 부수효과: 외부상태를 변경

// 순수 함수: 부수효과가 없는 함수
// 순수함수는 동일한 인수가 전달되면 언제나 동일한 값을 반환한다. (같은재료 -> 같은결과)
// 순수함수는 일반적으로 최소 하나 이상의 인수를 전달받는다.
// 순수함수는 인수의 불변성을 유지한다.(인수를 변경하지 않는 것이 기본)
// 순수함수는 어떤 외부 상태에도 의존하지 않으며 외부 상태를 변경하지도 않는다.

let count = 0; // 현재 카운트를 나타내는 상태

// 순수 함수 increase는 동일한 인수가 전달되면 언제나 동일한 값을 반환한다.
const increase = (n) => ++n; // 전달된 *인수의 값*을 변경.

// 순수 함수가 반환한 결과값을 *변수에 재할당해서* 상태를 변경
count = increase(count); // 변수에 재할당하는 새로운 작업을 통해서 외부 상태를 변경하는 것. 함수 자체로 변경 X
console.log(count); // 1

count = increase(count);
console.log(count); // 2


// 비순수 함수: 부수효과가 있는 함수
// 비순수 함수는 외부 상태에 의존하며, 외부 상태를 변경할수도 있다.
// 함수 내부에서 외부 상태를 직접 참조하지 않더라도 매개변수를 통해 객체를 전달받으면 비순수 함수가 된다.
let count2 = 0; // 현재 카운트를 나타내는 상태: increase2 함수에 의해 변화된다.

const increase2 = () => ++count2;

// 비순수 함수는 외부 상태(count2)를 변경하므로 상태 변화를 추적하기 어려워진다.
increase2(); // 함수 실행만으로도 외부 상태를 변경
console.log(count2); // 1

increase2();
console.log(count2); // 2



// 함수형 프로그래밍은 순수 함수와 보조 함수의 조합을 통해 외부 상태를 변경하는 부수효과를 최소화해서 불변성을 지향하는 프로그래밍 패러다임이다.
// 함수형 프로그래밍은 결국 순수 함수를 통해 부수 효과를 최대한 억제해 오류를 피하고 프로그램의 안정성을 높이려는 노력의 일환이다.
// 자바스크립트는 멀티 패러다임 언어이므로 객체지향 프로그래밍과 함수형 프로그래밍을 적극적으로 활용하고 있다.

