// 함수 리터럴

/*
- 자바스크립트의 함수는 객체 타입의 값이다. 따라서 함수도 리터럴로 생성할 수 있다. (리터럴: 값을 생성하기 위한 표기법)
- function 키워드, 함수 이름, 매개 변수 목록, 함수 몸체로 구성된다.
- 함수 리터럴도 평가되어 값을 생성하며, 이 값은 객체이다. 즉 함수는 *객체*다.
- 일반객체는 호출할 수 없지만 함수는 호출할 수 있다.
- 일반객체에는 없는 함수 객체만의 고유한 프로퍼티를 갖는다.
*/



// 변수에 함수 리터럴을 할당
let f = function add(x, y) {
    return x + y;
};


// 함수이름
/*
- 함수 이름은 식별자이므로 식별자 네이밍 규칙을 준수해야한다.
- 함수 이름은 함수 몸체 이름 내에서만 참조할 수 있다.
- 함수 이름은 생략 가능하다.
- 이름 있는 함수: 기명함수(다회사용) 이름 없는 함수: 무명/익명 함수(보통 1회만 사용)
*/



// 매개변수 목록
/*
- 0개 이상이 매개변수를 소괄호로 감싸고 쉼표로 구분한다. 생략 불가능.
- 각 매개변수에는 함수를 호출할때 지정한 인수가 *순서대로* 할당된다. 순서가 중요하다.
- 매개변수는 함수 몸체 내에서 변수와 동일하게 취급된다. 따라서 매개변수도 식별자 네이밍 규칙을 준수해야 한다.

- 하나의 함수에 매개변수는 1~2개 정도 사용하는 것이 적당하다.
- 매개변수가 많아지면 본래의 함수의 기능 외에 다른 기능도 하게 될 가능성이 높아져 복잡도가 올라간다. (하나의 함수는 하나의 기능!)
- 이를 위해 파라미터를 객체로 받을 수도 있다
- 파라미터를 객체로 받으면 인수 입력 실수(인수 순서 변경 등)를 방지할 수 있다. 인수가 들어오는 순서가 중요하기 떄문.
*/

// 파라미터를 객체로 받기
let arg = {  // 전달할 아규먼트를 객체로 생성
    x: "Hello ",
    y: "wolrd!"  // 아규먼트 값을 변경할 떄는 arg객체 내 프로퍼티 값을 변경해주면 된다.
}

function a ({x, y}){ // 파라미터를 객체형태로 받는다. arg 객체의 프로퍼티 키값을 입력한다.
    return x + y;
};

a(arg); // 함수 호출시에는 아규먼트를 직접 입력하지 않고, 아규먼트 값이 객체로 저장되어있는 arg 변수를 입력해준다.



// 함수 몸체
/*
- 함수가 호출되었을 때 일괄적으로 실행될 문들을 하나의 실행 단위로 정의한 코드 블록이다.
- 함수 몸체는 함수 호출에 의해 실행된다. (정의만으로는 싱행되지 않는다.)
*/
