// 함수: 함수는 마치 재료를 투입받아 제품을 생상하는 기계와 같다. (input -> 가공 -> output)
// 일련의 가공과정을 문(statement)으로 구현하고 코드 블록으로 감싸서 하나의 실행단위로 정의한 것이다.
// 함수


// 매개변수(parameter): 함수 내부로 입력을 전달받는 변수 (인수를 매개변수로 받음)
// 인수(argument): 함수 내부로 입력을 전달하는 입력값 (input값)
// 반환 값: 함수의 가공결과로 output된 값


// f(x, y) = x + y
function add(x, y) { 
    return x + y;  // 파라미터로 전달된 x, y와 리턴에 사용된 표현식 내 x, y는 값에 의한 전달(원시값 복사)이다.
}

// f(2, 5) = 7
add(2 ,5); // 7




// 함수 정의: 함수를 *생성*하는 것 (생성만으로는 실행되지 않는다.)
function add2(x,y) {  // 매개변수 x, y를 받아 더해주는 add2라는 이름의 함수를 생성.
    return x + y
}
// 함수 호출: 함수를 *실행*하는 것
let result = add(2, 5) // add2 함수에 인수 2, 5를 전달하면서 호출하면 반환값 7을 반환한다.

console.log(result); // 7




// 함수를 사용하는 이유 : 코드의 재사용이 가능해진다. 
/* 
- 유지보수 편의성을 높인다.
- 실수를 줄여 코드의 신뢰성을 높인다.
- 코드의 가독성을 향상시킨다. (적절한 함수 이름은 함수 내부 코드를 이해하지 않고도 함수의 역할을 파악할 수 있게 돕는다.)
*/
